/************************************************************/
/*                程序作者：爱的伊苏                        */
/*                程序完成时间：2019/1/6                    */
/*                有任何问题请联系：740531307@qq.com        */
/************************************************************/
//@永远得意的笑下去


  二叉排序树：左侧所有节点均小于根节点
             右侧所有节点均大于根节点
             节点的左右子树依旧是二叉排序树
             时间复杂度 nlogn ~ n  (折半查找 ~ 顺序查找)

  AVL树(平衡二叉树)：
             在二叉排序树基础上，每个节点左右子树的高度之差的绝对值不超过一
             平衡方法：  单旋 && 双旋
             时间复杂度 nlogn 二叉排序树的最优

 B树:
             N阶AVL树，所以高度平衡
             m阶h高 最大节点数 (m^h - 1)/(m - 1)    等比数列求和公式
             (最大关键字节数为 m^h - 1)

             头节点最少2子节点&&其余最少[m/2]-1个子节点&&所有叶节点同层
             高度为4的6阶B树 至多包含 (6**4-1)/(6-1)
             高度为5的6阶B树 至少包含
             第一层1
             第二层2
             第三层6
             第四层18
             第五层54
                                    /*  这里是从第二行开始订的等比求和    最后加上根节点  */
             n阶h高最小节点 ： N≥ {2*[1-┌m/2┐^(h-1)] / [1-┌m/2┐] } + 1
                          当N为3时可化简为N ≥ ┌m/2┐h-1 = 3**4
             //书本p201这个公式N代表关键字而不是节点数
             B树在生成过程中，起始第一次"分裂"的时候，会将一个旧的节点分为一个父节点和两个 子节点，原旧节点删除。
             删除的时候分情况讨论
                                一:叶节点，若删除后剩余关键字字数小于[m/2]-1
                                                    a兄弟关键字有富裕，父节点给子节点，兄弟节点给父节点
                                                    b兄弟都不富裕，连带兄弟和父节点的对应关键字一起合并
                                二：非叶节点 用子节点(直接后继 || 直接前驱)替换之。，然后回到对替换的子节点进行情况一的判断
HASH:
             书上例题均为闭散列表，线性探查法 || 双散列法
             散列函数的平均查找长度  依据三星探查法进行运算
各类排序时间复杂度
直接插入排序 n  ~ n^2
希尔排序    nlog2n ~ nlog2n
冒泡        n  ~ n^2
快排        nlog2n ~ n^2
堆排序      nlog2n ~ nlog2n
二路并归    nlog2n ~ nlog2n

大根堆初始调整方法
           从最后一个根节点 (length/2)开始，检查其孩子中较大的一个与根节点的大小
           若叶节点比根节点大，则交换位置，并跳转到交换叶节点位置处，再次与其根节点比较大小
           当所有根节点都被调用过一次，完成一次大根堆的调整

           当大根堆初次调整完以后，之后每次因调整后因首尾交换，所以我们仅需对交换后的待调整大根堆的首节点进行调整即可
